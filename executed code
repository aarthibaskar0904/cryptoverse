<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cryptocurrency Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            margin: 0;
            padding: 0;
            color: #333;
        }

        header {
            text-align: center;
            padding: 20px;
            background-color: #1e2a3a;
            color: #fff;
        }

        h1 {
            margin: 0;
        }

        .search-container {
            text-align: center;
            margin: 20px;
        }

        #search-bar, #currency-select, select {
            padding: 10px;
            font-size: 16px;
            margin: 10px;
        }

        button {
            padding: 10px 15px;
            background-color: #1e2a3a;
            color: white;
            border: none;
            cursor: pointer;
            margin-left: 10px;
        }

        button:hover {
            background-color: #333;
        }

        .crypto-container {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        .crypto-card {
            background-color: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            text-align: center;
            width: 300px;
            margin: 10px;
            transition: transform 0.3s;
        }

        .crypto-card:hover {
            transform: translateY(-10px);
        }

        .crypto-logo {
            width: 50px;
            height: 50px;
            margin-bottom: 10px;
        }

        h2 {
            font-size: 1.2rem;
            margin: 10px 0;
        }

        footer {
            text-align: center;
            margin-top: 40px;
            padding: 10px;
            background-color: #1e2a3a;
            color: #fff;
        }

        .chart-container {
            width: 80%;
            max-width: 1000px;
            margin: 20px auto;
            padding: 10px;
        }
    </style>
</head>
<body>
    <header>
        <h1>Cryptocurrency Dashboard</h1>
    </header>

    <!-- Search Bar & Dropdown -->
    <div class="search-container">
        <input type="text" id="search-bar" placeholder="Search Cryptocurrency" />
        <button onclick="searchCrypto()">Search</button>

        <!-- Dropdown for selecting any cryptocurrency dynamically -->
        <select id="crypto-select" onchange="dropdownSelectCrypto()">
            <option value="">Select a cryptocurrency</option>
        </select>

        <!-- Currency Conversion Dropdown -->
        <select id="currency-select" onchange="updateCurrency()">
            <option value="usd">USD</option>
            <option value="eur">EUR</option>
            <option value="gbp">GBP</option>
            <option value="jpy">JPY</option>
            <option value="inr">INR</option>
        </select>
    </div>

    <!-- Cryptocurrency Info -->
    <div class="crypto-container">
        <div class="crypto-card" id="crypto-card">
            <img src="" alt="Crypto Logo" class="crypto-logo" id="crypto-logo">
            <h2 id="crypto-name">Bitcoin (BTC)</h2>
            <p>Current Price: <span id="crypto-price">0</span></p>
            <p>24h High: <span id="crypto-24h-high">0</span></p>
            <p>24h Low: <span id="crypto-24h-low">0</span></p>
            <p>Market Cap: <span id="crypto-market-cap">0</span></p>
            <p>24h Volume: <span id="crypto-24h-volume">0</span></p>
        </div>
    </div>

    <!-- Chart Container -->
    <div class="chart-container">
        <canvas id="crypto-chart"></canvas>
    </div>

    <footer>
        <p>Powered by ADH Team</p>
    </footer>

    <script>
        let cryptoChart;
        let lastFetchedData = {}; // Cache for previously fetched data to avoid redundant API calls
        let lastSelectedCrypto = ''; // Store the last selected cryptocurrency

        // Function to fetch the list of all cryptocurrencies and populate the dropdown dynamically
        async function loadCryptoList() {
            try {
                const response = await fetch('https://api.coingecko.com/api/v3/coins/list');
                const cryptoList = await response.json();

                const cryptoSelect = document.getElementById('crypto-select');
                
                // Clear the previous options (in case of reload)
                cryptoSelect.innerHTML = '<option value="">Select a cryptocurrency</option>';

                // Add options for each cryptocurrency to the dropdown
                cryptoList.forEach(coin => {
                    const option = document.createElement('option');
                    option.value = coin.id;
                    option.textContent = `${coin.name} (${coin.symbol.toUpperCase()})`;
                    cryptoSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching cryptocurrency list:', error);
            }
        }

        // Function to fetch cryptocurrency data from CoinGecko API
        async function fetchCryptoData(cryptoId = 'bitcoin', currency = 'usd') {
            // If the data has already been fetched for this cryptoId, return the cached data
            if (lastFetchedData[cryptoId] && lastFetchedData[cryptoId][currency]) {
                updateCryptoInfo(lastFetchedData[cryptoId][currency], lastFetchedData[cryptoId][currency].prices, currency);
                return;
            }

            try {
                // Fetch data for the selected cryptocurrency
                const cryptoResponse = await fetch(`https://api.coingecko.com/api/v3/coins/${cryptoId}`);
                const cryptoData = await cryptoResponse.json();

                // Fetch market data for the last 7 days for the chart
                const marketDataResponse = await fetch(`https://api.coingecko.com/api/v3/coins/${cryptoId}/market_chart?vs_currency=${currency}&days=7`);
                const marketData = await marketDataResponse.json();

                // Cache the fetched data
                if (!lastFetchedData[cryptoId]) {
                    lastFetchedData[cryptoId] = {};
                }
                lastFetchedData[cryptoId][currency] = {
                    cryptoData,
                    prices: marketData.prices
                };

                // Update the UI with the fetched data
                updateCryptoInfo(cryptoData, marketData.prices, currency);
            } catch (error) {
                console.error('Error fetching crypto data:', error);
            }
        }

        // Function to update cryptocurrency info on the page
        function updateCryptoInfo(data, prices, currency) {
            const cryptoLogo = data.image.large;
            const cryptoName = data.name;
            const cryptoSymbol = data.symbol.toUpperCase();
            const currentPrice = data.market_data.current_price[currency];
            const high24h = data.market_data.high_24h[currency];
            const low24h = data.market_data.low_24h[currency];
            const marketCap = data.market_data.market_cap[currency];
            const volume24h = data.market_data.total_volume[currency];

            const symbolEmoji = getCryptoSymbolEmoji(cryptoSymbol);

            // Update the image, name, and price
            document.getElementById('crypto-logo').src = cryptoLogo;
            document.getElementById('crypto-name').textContent = `${cryptoName} (${cryptoSymbol}) ${symbolEmoji}`;
            document.getElementById('crypto-price').textContent = `${currentPrice} ${currency.toUpperCase()}`;
            document.getElementById('crypto-24h-high').textContent = `${high24h} ${currency.toUpperCase()}`;
            document.getElementById('crypto-24h-low').textContent = `${low24h} ${currency.toUpperCase()}`;
            document.getElementById('crypto-market-cap').textContent = `${marketCap.toLocaleString()} ${currency.toUpperCase()}`;
            document.getElementById('crypto-24h-volume').textContent = `${volume24h.toLocaleString()} ${currency.toUpperCase()}`;

            // Prepare data for chart
            const labels = prices.map(item => new Date(item[0]).toLocaleTimeString());
            const priceData = prices.map(item => item[1]);

            // Create or update the chart
            if (cryptoChart) {
                cryptoChart.destroy(); // Destroy existing chart if present
            }

            const ctx = document.getElementById('crypto-chart').getContext('2d');
            cryptoChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: `${data.name} Price (${currency.toUpperCase()})`,
                        data: priceData,
                        borderColor: 'rgba(75,192,192,1)',
                        fill: false,
                        tension: 0.1,
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            ticks: {
                                autoSkip: true,
                                maxTicksLimit: 7
                            }
                        },
                        y: {
                            beginAtZero: false
                        }
                    }
                }
            });
        }

        // Function to return emoji for a given cryptocurrency symbol
        function getCryptoSymbolEmoji(symbol) {
            const emojis = {
                "btc": "ü™ô",
                "eth": "üßë‚Äçüíª",
                "ltc": "üí∞",
                "xrp": "üåä",
                "ada": "üü¶",
                "doge": "üêï",
                "dot": "üî¥",
                "sol": "üåû",
                "shiba-inu": "üêæ",
                "link": "üîó"
            };
            return emojis[symbol] || "üíé";  // Default if no emoji is found
        }

        // Function to handle dropdown selection for any cryptocurrency
        function dropdownSelectCrypto() {
            const selectedCrypto = document.getElementById('crypto-select').value;
            const selectedCurrency = document.getElementById('currency-select').value;

            if (selectedCrypto && selectedCrypto !== lastSelectedCrypto) {
                fetchCryptoData(selectedCrypto, selectedCurrency); // Fetch data for the selected coin and currency
                lastSelectedCrypto = selectedCrypto;  // Store the selected cryptocurrency
            }
        }

        // Function to update the currency
        function updateCurrency() {
            const selectedCurrency = document.getElementById('currency-select').value;
            const selectedCrypto = document.getElementById('crypto-select').value;

            if (selectedCrypto) {
                fetchCryptoData(selectedCrypto, selectedCurrency); // Fetch data for the selected coin and currency
            }
        }

        // Search function for searching cryptocurrencies by symbol or name
        async function searchCrypto() {
            const searchTerm = document.getElementById('search-bar').value.toLowerCase().trim();

            if (!searchTerm) return; // Do nothing if search is empty

            try {
                // Fetch the list of all coins to match with the search term
                const coinsResponse = await fetch('https://api.coingecko.com/api/v3/coins/markets', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                });
                const coins = await coinsResponse.json();

                // Find the coin that matches the search term
                const coin = coins.find(coin => coin.symbol === searchTerm || coin.name.toLowerCase().includes(searchTerm));

                if (coin) {
                    fetchCryptoData(coin.id); // Fetch data for the selected coin
                } else {
                    alert('Cryptocurrency not found.');
                }
            } catch (error) {
                console.error('Error fetching crypto list:', error);
            }
        }

        // Initial setup: Load cryptocurrency list and fetch data for a default crypto
        window.onload = function() {
            loadCryptoList();
            fetchCryptoData('bitcoin', 'usd'); // Default to Bitcoin initially
        };
    </script>
</body>
</html>
